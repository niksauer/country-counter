#!/usr/bin/env python3
"""
Script to plot visited countries on a world map.
Reads from the JSON output generated by count_countries.py
"""

import argparse
import json
import sys
from pathlib import Path

import geopandas as gpd
import matplotlib.pyplot as plt


def load_countries_json(json_file: str) -> set[str]:
    """
    Load countries from JSON file.

    Returns:
        set: Set of country names
    """
    with open(json_file, encoding='utf-8') as f:
        data = json.load(f)

    return {entry['country'] for entry in data}


def plot_world_map(
    countries: set[str],
    background_color: str = '#f0f0f0',
    visited_color: str = '#ff6b6b',
    output_file: str | None = None,
    title: str = 'Visited Countries',
):
    """
    Plot countries on a world map.

    Args:
        countries: Set of country names to highlight
        background_color: Background color for the map
        visited_color: Color for visited countries
        output_file: Path to save the output image (optional)
        title: Title for the map
    """
    # Load world map data from Natural Earth
    world = gpd.read_file(
        'https://naciscdn.org/naturalearth/110m/cultural/ne_110m_admin_0_countries.zip'
    )

    # Create mapping of country names to handle variations
    country_mapping = {
        'United States': 'United States of America',
        'Dominican Republic': 'Dominican Rep.',
        'Czechia': 'Czech Rep.',
        'Tanzania': 'Tanzania',
    }

    # Map visited countries
    mapped_countries = set()
    for country in countries:
        mapped_countries.add(country_mapping.get(country, country))

    # Create a column for visited countries (note: Natural Earth uses 'NAME' column)
    world['visited'] = world['NAME'].isin(mapped_countries)  # pyright: ignore [reportArgumentType]

    # Create figure and axis
    fig, ax = plt.subplots(1, 1, figsize=(20, 10))
    fig.patch.set_facecolor(background_color)
    ax.set_facecolor(background_color)

    # Plot the map
    world.plot(
        ax=ax,
        color=world['visited'].map({True: visited_color, False: '#e0e0e0'}),  # pyright: ignore [reportArgumentType]
        edgecolor='white',
        linewidth=0.5,
    )

    # Remove axes
    ax.set_xlim(-180, 180)
    ax.set_ylim(-90, 90)
    ax.axis('off')

    # Add title
    plt.title(title, fontsize=24, pad=20, fontweight='bold')

    # Add legend
    from matplotlib.patches import Patch

    legend_elements = [
        Patch(facecolor=visited_color, label=f'Visited ({len(countries)})'),
        Patch(facecolor='#e0e0e0', label='Not visited'),
    ]
    ax.legend(
        handles=legend_elements,
        loc='lower left',
        frameon=True,
        fancybox=True,
        shadow=True,
    )

    plt.tight_layout()

    # Save or show
    if output_file:
        plt.savefig(output_file, dpi=300, bbox_inches='tight', facecolor=background_color)
        print(f'Map saved to: {output_file}')
    else:
        plt.show()

    plt.close()


def main():
    parser = argparse.ArgumentParser(
        description='Plot visited countries on a world map from JSON output'
    )
    parser.add_argument(
        'json_file',
        help='Path to the countries JSON file (e.g., cache/Visited-Nik_countries.json)',
    )
    parser.add_argument(
        '--background-color',
        default='#f0f0f0',
        help='Background color for the map (default: #f0f0f0)',
    )
    parser.add_argument(
        '--visited-color',
        default='#ff6b6b',
        help='Color for visited countries (default: #ff6b6b)',
    )
    parser.add_argument(
        '--output',
        '-o',
        help='Output file path. If not provided, saves to build/ directory with same name as input.',
    )
    parser.add_argument(
        '--title',
        default='Visited Countries',
        help='Title for the map (default: "Visited Countries")',
    )

    args = parser.parse_args()

    # Check if input file exists
    if not Path(args.json_file).exists():
        print(f'Error: JSON file "{args.json_file}" not found', file=sys.stderr)
        sys.exit(1)

    # Determine output file
    if args.output:
        output_file = args.output
    else:
        # Create build directory if it doesn't exist
        build_dir = Path('build')
        build_dir.mkdir(exist_ok=True)

        # Generate output filename based on input filename
        input_path = Path(args.json_file)
        output_filename = input_path.stem + '.svg'
        output_file = str(build_dir / output_filename)

    # Load countries
    print(f'Loading countries from {args.json_file}...')
    countries = load_countries_json(args.json_file)
    print(f'Found {len(countries)} countries')

    # Plot map
    print('Generating map...')
    plot_world_map(
        countries,
        background_color=args.background_color,
        visited_color=args.visited_color,
        output_file=output_file,
        title=args.title,
    )

    print('Done!')


if __name__ == '__main__':
    main()
